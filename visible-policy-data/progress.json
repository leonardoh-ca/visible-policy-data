<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Visible Policy ¬∑ Ontario</title>
  <style>
    :root {
      --bg: #f0f2f5;
      --bg-secondary: #ffffffcc;
      --text: #111;
      --tab-hover: #ffffff80;
    }

    body.dark-mode {
      --bg: #121212;
      --bg-secondary: #1f1f1fcc;
      --text: #f5f5f5;
      --tab-hover: #33333380;
    }

    body {
      margin: 0;
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
      background: var(--bg);
      color: var(--text);
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 40px 20px;
      transition: background 0.3s, color 0.3s;
    }

    h1 {
      font-size: 2.5rem;
      font-weight: 600;
      text-align: center;
      margin-bottom: 30px;
    }

    .tabs {
      display: flex;
      gap: 20px;
      margin-bottom: 40px;
      flex-wrap: wrap;
    }

    .tab {
      padding: 10px 20px;
      border-radius: 16px;
      background: var(--bg-secondary);
      backdrop-filter: blur(10px);
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      color: var(--text);
      font-weight: 500;
      cursor: pointer;
      transition: background 0.2s;
    }

    .tab:hover {
      background: var(--tab-hover);
    }

    .module {
      width: 100%;
      max-width: 900px;
      background: var(--bg-secondary);
      backdrop-filter: blur(12px);
      border-radius: 24px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
      padding: 30px;
      margin-bottom: 30px;
      transition: background 0.3s;
    }

    .module-title {
      font-size: 1.5rem;
      font-weight: 600;
      margin-bottom: 20px;
    }

    .dashboard-entry {
      display: grid;
      grid-template-columns: 1fr 2fr 1fr 1fr;
      gap: 20px;
      padding: 15px 0;
      border-bottom: 1px solid #ccc;
    }

    .dashboard-entry div {
      font-size: 0.95rem;
    }

    .dashboard-header {
      font-weight: bold;
      border-bottom: 2px solid var(--text);
    }

    .toggle-container {
      position: fixed;
      top: 20px;
      right: 20px;
      width: 60px;
      height: 32px;
      background: var(--bg-secondary);
      border-radius: 16px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      display: flex;
      align-items: center;
      padding: 4px;
      cursor: pointer;
      transition: background 0.3s;
    }

    .toggle-ball {
      width: 24px;
      height: 24px;
      background: var(--text);
      border-radius: 50%;
      transition: transform 0.3s, background 0.3s;
    }

    .toggle-container.active .toggle-ball {
      transform: translateX(28px);
    }
  </style>
</head>
<body>
  <div class="toggle-container" id="toggleSwitch">
    <div class="toggle-ball"></div>
  </div>

  <h1>Visible Policy ¬∑ Ontario</h1>

  <div class="tabs">
    <div class="tab">Home</div>
    <div class="tab">Progress</div>
    <div class="tab">AskGov</div>
    <div class="tab">About</div>
  </div>

  <div class="module">
    <div class="module-title">üìä Progress Dashboard</div>
    <div class="dashboard-entry dashboard-header">
      <div>Category</div>
      <div>Specific Policy</div>
      <div>Current Status</div>
      <div>Last Updated</div>
    </div>
    <div id="dashboard"></div>
  </div>

  <script>
    const toggleSwitch = document.getElementById('toggleSwitch');
    toggleSwitch.addEventListener('click', () => {
      document.body.classList.toggle('dark-mode');
      toggleSwitch.classList.toggle('active');
    });

    async function fetchAndRenderDashboard() {
      const container = document.getElementById('dashboard');
      container.innerHTML = '<div>üîÑ Loading data...</div>';
      try {
        const res = await fetch('https://leonardoh-ca.github.io/visible-policy-data/progress.json');
        const data = await res.json();
        container.innerHTML = '';
        for (const item of data) {
          const icon = item.status === 'Completed' ? 'üü¢' : item.status === 'Delay' ? 'üî¥' : 'üü°';
          const statusLabel = `${icon} ${item.status} ${item.percent || 0}%`;
          const row = `
            <div class="dashboard-entry">
              <div>${item.category}</div>
              <div>${item.policy}</div>
              <div>${statusLabel}</div>
              <div>${item.updated_at}</div>
            </div>
          `;
          container.insertAdjacentHTML('beforeend', row);
        }
      } catch (err) {
        container.innerHTML = '<div style="color: red;">‚ö†Ô∏è Failed to load data</div>';
      }
    }

    fetchAndRenderDashboard();
    setInterval(fetchAndRenderDashboard, 30 * 60 * 1000);
  </script>
</body>
</html>
